#!bash
# 
# Syncany Bash Completion
# =======================
# 
# Bash completion support for [Syncany](https://www.syncany.org/).
# 
# The script is largely based on the BZR/Bazaar bash completion script 
# available at https://launchpad.net/bzr-bash-completion
# 
# Installation
# ------------
# 
# 1. Place it in a `bash-completion.d` folder:
# 
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
# 
# 2. Open new bash, and type `sy [TAB]`
# 

shopt -s progcomp
_sy ()
{
	local plugins lastcmd
	local cur cmds cmdIdx cmd cmdOpts fixedWords i globalOpts
	local curOpt optEnums
	local IFS=$' \n'

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}

	cmds='cleanup connect down genlink init ls ls-remote plugin restore status up watch'
	plugins=( local webdav sftp ftp samba s3 )
	globalOpts=( -l --localdir= -d --debug -h --help -v -vv --print )

	# do ordinary expansion if we are anywhere after a -- argument
	for ((i = 1; i < COMP_CWORD; ++i)); do
		[[ ${COMP_WORDS[i]} == "--" ]] && return 0
	done

	# find the command; it's the first word not starting in -
	cmd=
	for ((cmdIdx = 1; cmdIdx < ${#COMP_WORDS[@]}; ++cmdIdx)); do
		if [[ ${COMP_WORDS[cmdIdx]} != -* ]]; then
			cmd=${COMP_WORDS[cmdIdx]}
			break
		fi
	done

	# complete command name if we are not already past the command
	if [[ $COMP_CWORD -le cmdIdx ]]; then
		if [[ $cur == -* ]]; then
			COMPREPLY=( $( compgen -W "${globalOpts[*]}" -- $cur ) )
		else
			COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
		fi	
		
		return 0
	fi

	# find the last sub-command; it's the last word not starting in -
	# almost the same as above, but don't break and can't be empty
	lastcmd=
	for ((cmdIdx = 1; cmdIdx < ${#COMP_WORDS[@]}; ++cmdIdx)); do
		if [[ ${COMP_WORDS[cmdIdx]} != -* ]] && [[ -n ${COMP_WORDS[cmdIdx]} ]] && [[ ${COMP_WORDS[cmdIdx]} != $cur ]]; then
			lastcmd=${COMP_WORDS[cmdIdx]}
		fi
	done

	# find the option for which we want to complete a value
	curOpt=
	if [[ $cur != -* ]] && [[ $COMP_CWORD -gt 1 ]]; then
		curOpt=${COMP_WORDS[COMP_CWORD - 1]}
		if [[ $curOpt == = ]]; then
			curOpt=${COMP_WORDS[COMP_CWORD - 2]}
		elif [[ $cur == : ]]; then
			cur=
			curOpt="$curOpt:"
		elif [[ $curOpt == : ]]; then
			curOpt=${COMP_WORDS[COMP_CWORD - 2]}:
		fi
	fi

	cmdOpts=( )
	optEnums=( )
	fixedWords=( )
	case $cmd in
	cleanup)
		cmdOpts=( -M --no-database-merge -V --no-version-remove -k --keep-versions= -f --force-checksum )
		;;
	connect)
		cmdOpts=( -P --plugin= -o --plugin-option= -I --no-interaction )

		case $curOpt in
			--plugin|-P) 
				optEnums=( "${plugins[@]}" )
				;;		
		esac
		;;
	down)
		cmdOpts=( -C --conflict-strategy=ask --conflict-strategy=rename -A --no-apply )
		cmdEnums=( ask rename )
		;;
	genlink)
		cmdOpts=( -s --short )
		;;
	init)
		cmdOpts=( -P --plugin= -o --plugin-option= -E --no-encryption -G --no-compression -t --create-target -a --advanced -I --no-interaction )

		case $curOpt in
			--plugin|-P) 
				optEnums=( "${plugins[@]}" )
				;;		
		esac
		;;
	ls)
		cmdOpts=( -V --versions= -t --types= -D --date= -r --recursive -f --full-checksums -g --group )
		;;
	ls-remote)
		cmdOpts=( )
		;;
	plugin)
		case $lastcmd in
			list) 
				cmdOpts=( -R --remote-only -L --local-only -s --snapshots )
				;;
			install) 
				cmdOpts=( -s --snapshot )
				fixedWords=( "${plugins[@]}" )
				;;
			remove) 
				cmdOpts=( )
				fixedWords=( "${plugins[@]}" )
				;;
			*) 
				cmdOpts=( )
				fixedWords=( list install remove )
				;;
		esac
		;;
	restore)
		cmdOpts=( -r --revision= -t --target= )
		;;
	status)
		cmdOpts=( -f --force-checksum )
		;;
	up)
		cmdOpts=( -f --force-checksum )
		;;
	watch)
		cmdOpts=( -i --interval= -s --delay -W --no-watcher -a --announce= -N --no-announcements -f --force-checksum -C --conflict-strategy=ask --conflict-strategy=rename -A --no-apply )
		;;
	*)
		cmdOpts=( --help -h )
		;;
	esac

	IFS=$'\n'
	if [[ ${#fixedWords[@]} -eq 0 ]] && [[ ${#optEnums[@]} -eq 0 ]] && [[ $cur != -* ]]; then
		# return nothing.
		return 0
	elif [[ $cur == = ]] && [[ ${#optEnums[@]} -gt 0 ]]; then
		# complete directly after "--option=", list all enum values
		COMPREPLY=( "${optEnums[@]}" )
		return 0
	elif [[ $cur == -* ]]; then
		# return all short and long options
		fixedWords=( "${cmdOpts[@]}"
		             "${globalOpts[@]}" )
	else
		# return all enums and fixed words
		fixedWords=( "${optEnums[@]}"
		             "${fixedWords[@]}" )
	fi

	if [[ ${#fixedWords[@]} -gt 0 ]]; then
		COMPREPLY=( $( compgen -W "${fixedWords[*]}" -- $cur ) )
	fi

	return 0
}

complete -F _sy sy
complete -F _sy syncany
