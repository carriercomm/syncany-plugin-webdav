// Packaging ///////////////////////////////////////////////////////////////////

project.ext {
	debianDistribution = (project.hasProperty("dist")) ? project.getProperty("dist") : "unstable"
	debianPpaVersion = (!"unstable".equals(debianDistribution)) ? "~${debianDistribution}ppa${applicationVersionDebian}" : ""
	debianApplicationVersionFull = "${applicationVersionFull}".replaceAll("-", ".") + debianPpaVersion
	debianTargetPpa = (applicationRelease) ? "ppa:syncany/release" : "ppa:syncany/snapshot"	
}

task debianClean(type: Delete) {
	delete 'build/debian'	
}

task debianManpages(dependsOn: installApp) {
	doLast {
		rootProject.file("build/debian/syncany/debian").mkdirs()
	
		exec {
			workingDir rootProject.file("gradle/debian")
			commandLine "./makemanpages.pl"
		}
	}
}

task debianPrepare(dependsOn: [debianClean, installApp, debianManpages]) { 
	doLast {
		copy {
			from rootProject.files("build/install/syncany") 
			into rootProject.file("build/debian/syncany")
			exclude("**/*.bat")
		}

		copy {
			from rootProject.files("build/install/syncany/LICENSE.md") 
			into rootProject.file("build/debian/syncany/debian")
			rename("LICENSE.md", "copyright")
		}

		copy {
			from rootProject.files("gradle/debian/debian") 
			into rootProject.file("build/debian/syncany/debian")
		}

		copy {
			from rootProject.files("gradle/bash/syncany.bash-completion") 
			into rootProject.file("build/debian/syncany/debian")
		}

		exec {
			workingDir rootProject.file("gradle/debian")
			commandLine "./makechangelog.pl", "syncany", "${debianDistribution}", "${debianApplicationVersionFull}", "../../CHANGELOG.md", "../../build/debian/syncany/debian/changelog"
		}
	}
}

task ppaBuild(dependsOn: debianPrepare) { 
	doLast {
		exec {
			commandLine(
				rootProject.file("gradle/debian/debuild-signed.sh"), 
				rootProject.file("gradle/debian/gpg/syncany-team.asc.aes256"),
				rootProject.file("build"),
				rootProject.file("build/debian/syncany/debian")
			)
		}
	}
}

task ppa(dependsOn: ppaBuild) {
	doLast {
		exec {
			commandLine(
				rootProject.file("gradle/debian/dput-ppa.sh"), 
				rootProject.file("gradle/debian/dput.cf"),
				rootProject.file("${buildDir}/debian"),
				debianTargetPpa
			)			
		}
	}
}

task debian(dependsOn: debianPrepare) { 
	doLast {
		exec {
			workingDir rootProject.file("build/debian/syncany")
			commandLine "debuild -i -us -uc -b".split()
		}
	}
}
